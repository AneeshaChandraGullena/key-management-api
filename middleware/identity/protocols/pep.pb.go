// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pep.proto

/*
Package pep is a generated protocol buffer package.

It is generated from these files:
	pep.proto

It has these top-level messages:
	UAAHeaders
	UAAAuthnReply
	AuthzRequest
	AuthzReply
*/
package pep

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthzReply_Provider int32

const (
	AuthzReply_UNKNOWN AuthzReply_Provider = 0
	AuthzReply_UAA     AuthzReply_Provider = 1
	AuthzReply_IAM     AuthzReply_Provider = 2
)

var AuthzReply_Provider_name = map[int32]string{
	0: "UNKNOWN",
	1: "UAA",
	2: "IAM",
}
var AuthzReply_Provider_value = map[string]int32{
	"UNKNOWN": 0,
	"UAA":     1,
	"IAM":     2,
}

func (x AuthzReply_Provider) String() string {
	return proto.EnumName(AuthzReply_Provider_name, int32(x))
}
func (AuthzReply_Provider) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// UAAHeaders contains required authorization/authentication headers
type UAAHeaders struct {
	Token         string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	BluemixSpace  string `protobuf:"bytes,2,opt,name=bluemix_space,json=bluemixSpace" json:"bluemix_space,omitempty"`
	BluemixOrg    string `protobuf:"bytes,3,opt,name=bluemix_org,json=bluemixOrg" json:"bluemix_org,omitempty"`
	CorrelationId string `protobuf:"bytes,4,opt,name=correlation_id,json=correlationId" json:"correlation_id,omitempty"`
}

func (m *UAAHeaders) Reset()                    { *m = UAAHeaders{} }
func (m *UAAHeaders) String() string            { return proto.CompactTextString(m) }
func (*UAAHeaders) ProtoMessage()               {}
func (*UAAHeaders) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UAAHeaders) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UAAHeaders) GetBluemixSpace() string {
	if m != nil {
		return m.BluemixSpace
	}
	return ""
}

func (m *UAAHeaders) GetBluemixOrg() string {
	if m != nil {
		return m.BluemixOrg
	}
	return ""
}

func (m *UAAHeaders) GetCorrelationId() string {
	if m != nil {
		return m.CorrelationId
	}
	return ""
}

// UAAAuthnReply envelope for PEP
type UAAAuthnReply struct {
	Authenticated bool   `protobuf:"varint,1,opt,name=authenticated" json:"authenticated,omitempty"`
	Error         string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *UAAAuthnReply) Reset()                    { *m = UAAAuthnReply{} }
func (m *UAAAuthnReply) String() string            { return proto.CompactTextString(m) }
func (*UAAAuthnReply) ProtoMessage()               {}
func (*UAAAuthnReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UAAAuthnReply) GetAuthenticated() bool {
	if m != nil {
		return m.Authenticated
	}
	return false
}

func (m *UAAAuthnReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Common Authorization Request for PEP
type AuthzRequest struct {
	Header   map[string]string `protobuf:"bytes,1,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Action   string            `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	Resource string            `protobuf:"bytes,3,opt,name=resource" json:"resource,omitempty"`
}

func (m *AuthzRequest) Reset()                    { *m = AuthzRequest{} }
func (m *AuthzRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthzRequest) ProtoMessage()               {}
func (*AuthzRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthzRequest) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AuthzRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *AuthzRequest) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

// Common Authorization Reply for PEP
type AuthzReply struct {
	Provider AuthzReply_Provider `protobuf:"varint,1,opt,name=provider,enum=pep.core.AuthzReply_Provider" json:"provider,omitempty"`
	UserId   string              `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Role     string              `protobuf:"bytes,3,opt,name=role" json:"role,omitempty"`
	Allowed  bool                `protobuf:"varint,4,opt,name=allowed" json:"allowed,omitempty"`
	Error    string              `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (m *AuthzReply) Reset()                    { *m = AuthzReply{} }
func (m *AuthzReply) String() string            { return proto.CompactTextString(m) }
func (*AuthzReply) ProtoMessage()               {}
func (*AuthzReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AuthzReply) GetProvider() AuthzReply_Provider {
	if m != nil {
		return m.Provider
	}
	return AuthzReply_UNKNOWN
}

func (m *AuthzReply) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AuthzReply) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *AuthzReply) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func (m *AuthzReply) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*UAAHeaders)(nil), "pep.core.UAAHeaders")
	proto.RegisterType((*UAAAuthnReply)(nil), "pep.core.UAAAuthnReply")
	proto.RegisterType((*AuthzRequest)(nil), "pep.core.AuthzRequest")
	proto.RegisterType((*AuthzReply)(nil), "pep.core.AuthzReply")
	proto.RegisterEnum("pep.core.AuthzReply_Provider", AuthzReply_Provider_name, AuthzReply_Provider_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for PEPAPI service

type PEPAPIClient interface {
	CheckAuthorization(ctx context.Context, in *AuthzRequest, opts ...grpc.CallOption) (*AuthzReply, error)
	UAAVerifyIdentity(ctx context.Context, in *UAAHeaders, opts ...grpc.CallOption) (*UAAAuthnReply, error)
}

type pEPAPIClient struct {
	cc *grpc.ClientConn
}

func NewPEPAPIClient(cc *grpc.ClientConn) PEPAPIClient {
	return &pEPAPIClient{cc}
}

func (c *pEPAPIClient) CheckAuthorization(ctx context.Context, in *AuthzRequest, opts ...grpc.CallOption) (*AuthzReply, error) {
	out := new(AuthzReply)
	err := grpc.Invoke(ctx, "/pep.core.PEPAPI/CheckAuthorization", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pEPAPIClient) UAAVerifyIdentity(ctx context.Context, in *UAAHeaders, opts ...grpc.CallOption) (*UAAAuthnReply, error) {
	out := new(UAAAuthnReply)
	err := grpc.Invoke(ctx, "/pep.core.PEPAPI/UAAVerifyIdentity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PEPAPI service

type PEPAPIServer interface {
	CheckAuthorization(context.Context, *AuthzRequest) (*AuthzReply, error)
	UAAVerifyIdentity(context.Context, *UAAHeaders) (*UAAAuthnReply, error)
}

func RegisterPEPAPIServer(s *grpc.Server, srv PEPAPIServer) {
	s.RegisterService(&_PEPAPI_serviceDesc, srv)
}

func _PEPAPI_CheckAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PEPAPIServer).CheckAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pep.core.PEPAPI/CheckAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PEPAPIServer).CheckAuthorization(ctx, req.(*AuthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PEPAPI_UAAVerifyIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UAAHeaders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PEPAPIServer).UAAVerifyIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pep.core.PEPAPI/UAAVerifyIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PEPAPIServer).UAAVerifyIdentity(ctx, req.(*UAAHeaders))
	}
	return interceptor(ctx, in, info, handler)
}

var _PEPAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pep.core.PEPAPI",
	HandlerType: (*PEPAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuthorization",
			Handler:    _PEPAPI_CheckAuthorization_Handler,
		},
		{
			MethodName: "UAAVerifyIdentity",
			Handler:    _PEPAPI_UAAVerifyIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pep.proto",
}

func init() { proto.RegisterFile("pep.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xcd, 0x26, 0x4d, 0xe2, 0x4e, 0x9a, 0x2a, 0x8c, 0xaa, 0xd6, 0x8a, 0x84, 0xa8, 0x0c, 0x48,
	0xe1, 0x92, 0x43, 0xb8, 0xd0, 0xde, 0x16, 0x5a, 0x09, 0xab, 0x22, 0x8d, 0x8c, 0x0c, 0x12, 0x97,
	0xca, 0xb5, 0x87, 0xc6, 0x8a, 0xf1, 0x9a, 0xf5, 0xba, 0xe0, 0xfe, 0x04, 0x17, 0x7e, 0x86, 0xaf,
	0xe0, 0x97, 0xd0, 0xda, 0xeb, 0xc6, 0x15, 0xbd, 0xcd, 0x7b, 0x7e, 0xde, 0x7d, 0xf3, 0x66, 0x16,
	0x76, 0x33, 0xca, 0xe6, 0x99, 0x14, 0x4a, 0xa0, 0xa5, 0xcb, 0x50, 0x48, 0x72, 0x7e, 0x31, 0x00,
	0x9f, 0xf3, 0xf7, 0x14, 0x44, 0x24, 0x73, 0x3c, 0x80, 0xbe, 0x12, 0x1b, 0x4a, 0x6d, 0x76, 0xcc,
	0x66, 0xbb, 0x5e, 0x0d, 0xf0, 0x39, 0x8c, 0xaf, 0x93, 0x82, 0xbe, 0xc5, 0x3f, 0xaf, 0xf2, 0x2c,
	0x08, 0xc9, 0xee, 0x56, 0x5f, 0xf7, 0x0c, 0xf9, 0x51, 0x73, 0xf8, 0x0c, 0x46, 0x8d, 0x48, 0xc8,
	0x1b, 0xbb, 0x57, 0x49, 0xc0, 0x50, 0x97, 0xf2, 0x06, 0x5f, 0xc2, 0x7e, 0x28, 0xa4, 0xa4, 0x24,
	0x50, 0xb1, 0x48, 0xaf, 0xe2, 0xc8, 0xde, 0xa9, 0x34, 0xe3, 0x16, 0xeb, 0x46, 0xce, 0x05, 0x8c,
	0x7d, 0xce, 0x79, 0xa1, 0xd6, 0xa9, 0x47, 0x59, 0x52, 0xe2, 0x0b, 0x18, 0x07, 0x85, 0x5a, 0x53,
	0xaa, 0xe2, 0x30, 0x50, 0x14, 0x55, 0xde, 0x2c, 0xef, 0x21, 0xa9, 0x9d, 0x93, 0x94, 0x42, 0x1a,
	0x6f, 0x35, 0x70, 0xfe, 0x30, 0xd8, 0xd3, 0x47, 0xdd, 0x79, 0xf4, 0xbd, 0xa0, 0x5c, 0xe1, 0x29,
	0x0c, 0xd6, 0x55, 0xaf, 0x36, 0x3b, 0xee, 0xcd, 0x46, 0x0b, 0x67, 0xde, 0x44, 0x31, 0x6f, 0xeb,
	0xe6, 0x75, 0x20, 0xe7, 0xa9, 0x92, 0xa5, 0x67, 0xfe, 0xc0, 0x43, 0x18, 0x04, 0xa1, 0x76, 0x69,
	0xee, 0x30, 0x08, 0xa7, 0x60, 0x49, 0xca, 0x45, 0x21, 0x43, 0x32, 0x6d, 0xdf, 0xe3, 0xe9, 0x09,
	0x8c, 0x5a, 0x47, 0xe1, 0x04, 0x7a, 0x1b, 0x2a, 0x4d, 0xba, 0xba, 0xd4, 0xbe, 0x6f, 0x83, 0xa4,
	0x68, 0x32, 0xad, 0xc1, 0x69, 0xf7, 0x0d, 0x73, 0xfe, 0x32, 0x00, 0xe3, 0x49, 0xc7, 0x70, 0x02,
	0x56, 0x26, 0xc5, 0x6d, 0x5c, 0x7b, 0x67, 0xb3, 0xfd, 0xc5, 0xd3, 0xff, 0xbc, 0x67, 0x49, 0x39,
	0x5f, 0x19, 0x91, 0x77, 0x2f, 0xc7, 0x23, 0x18, 0x16, 0x39, 0x49, 0x1d, 0xb9, 0x71, 0xae, 0xa1,
	0x1b, 0x21, 0xc2, 0x8e, 0x14, 0x49, 0xe3, 0xba, 0xaa, 0xd1, 0x86, 0x61, 0x90, 0x24, 0xe2, 0x07,
	0xd5, 0xf3, 0xb1, 0xbc, 0x06, 0x6e, 0x23, 0xee, 0xb7, 0x23, 0x7e, 0x05, 0x56, 0x73, 0x25, 0x8e,
	0x60, 0xe8, 0x2f, 0x2f, 0x96, 0x97, 0x9f, 0x97, 0x93, 0x0e, 0x0e, 0xa1, 0xe7, 0x73, 0x3e, 0x61,
	0xba, 0x70, 0xf9, 0x87, 0x49, 0x77, 0xf1, 0x9b, 0xc1, 0x60, 0x75, 0xbe, 0xe2, 0x2b, 0x17, 0xcf,
	0x00, 0xdf, 0xad, 0x29, 0xdc, 0x68, 0xe3, 0x42, 0xc6, 0x77, 0xd5, 0xf4, 0xf1, 0xf0, 0xf1, 0x69,
	0x4c, 0x0f, 0x1e, 0xeb, 0xd4, 0xe9, 0xe0, 0x19, 0x3c, 0xf1, 0x39, 0xff, 0x44, 0x32, 0xfe, 0x5a,
	0xba, 0x91, 0x5e, 0x06, 0x55, 0x62, 0x4b, 0xbc, 0xdd, 0xec, 0xe9, 0xd1, 0x03, 0x76, 0xbb, 0x5e,
	0x4e, 0xe7, 0x6d, 0xff, 0x4b, 0x2f, 0xa3, 0xec, 0x7a, 0x50, 0xbd, 0x8d, 0xd7, 0xff, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x1a, 0x6f, 0x35, 0xfd, 0x28, 0x03, 0x00, 0x00,
}
